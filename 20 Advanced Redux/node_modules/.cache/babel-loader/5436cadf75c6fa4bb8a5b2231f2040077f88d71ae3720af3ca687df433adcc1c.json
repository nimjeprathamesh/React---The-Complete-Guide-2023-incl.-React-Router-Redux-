{"ast":null,"code":"import { cartActions } from './cartSlice';\nimport { uiActions } from './uiSlice';\nexport const fetchCartData = () => {\n  return async dispatch => {\n    const fetchData = async () => {\n      const response = await fetch('https://react-http-bf792-default-rtdb.firebaseio.com/cart.json');\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n      const data = await response.json();\n      return data;\n    };\n    try {\n      const carData = await fetchData();\n      dispatch(cartActions.replaceCart({\n        items: carData.items || [],\n        totalQuantity: carData.totalQuantity\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Fetching cart data failed!'\n      }));\n    }\n  };\n};\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-bf792-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify({\n          items: cart.items,\n          totalQuantity: cart.totalQuantity\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};","map":{"version":3,"names":["cartActions","uiActions","fetchCartData","dispatch","fetchData","response","fetch","ok","Error","data","json","carData","replaceCart","items","totalQuantity","error","showNotification","status","title","message","sendCartData","cart","sendRequest","method","body","JSON","stringify"],"sources":["D:/Documents/React---The-Complete-Guide-2023-incl.-React-Router-Redux-/20 Advanced Redux/src/store/cartActions.jsx"],"sourcesContent":["import { cartActions } from './cartSlice';\nimport { uiActions } from './uiSlice';\n\nexport const fetchCartData = () => {\n    return async (dispatch) => {\n        const fetchData = async () => {\n            const response = await fetch(\n                'https://react-http-bf792-default-rtdb.firebaseio.com/cart.json'\n            );\n\n            if(!response.ok) {\n                throw new Error('Could not fetch cart data!');\n            }\n\n            const data = await response.json();\n\n            return data;\n        };\n\n        try{\n            const carData = await fetchData();\n            dispatch(cartActions.replaceCart({\n                items: carData.items || [],\n                totalQuantity: carData.totalQuantity,\n            }));\n        } catch(error) {\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Fetching cart data failed!',\n            }));\n        }\n    };\n};\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            uiActions.showNotification({\n                status: 'pending',\n                title: 'Sending...',\n                message: 'Sending cart data!',\n            })\n        );\n\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-bf792-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify({\n                    items: cart.items,\n                    totalQuantity: cart.totalQuantity,\n                }),\n            });\n\n            if(!response.ok) {\n                throw new Error('Sending cart data failed.');\n            }\n        };\n\n        try {\n            await sendRequest();\n\n            dispatch(uiActions.showNotification({\n                status: 'success',\n                title: 'Success!',\n                message: 'Sent cart data successfully!',\n            }));\n        } catch(error) {\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending cart data failed!',\n            }));\n        }\n    };\n};"],"mappings":"AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,SAAS,QAAQ,WAAW;AAErC,OAAO,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAC/B,OAAO,MAAOC,QAAQ,IAAK;IACvB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,gEACJ,CAAC;MAED,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MACjD;MAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAElC,OAAOD,IAAI;IACf,CAAC;IAED,IAAG;MACC,MAAME,OAAO,GAAG,MAAMP,SAAS,CAAC,CAAC;MACjCD,QAAQ,CAACH,WAAW,CAACY,WAAW,CAAC;QAC7BC,KAAK,EAAEF,OAAO,CAACE,KAAK,IAAI,EAAE;QAC1BC,aAAa,EAAEH,OAAO,CAACG;MAC3B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAMC,KAAK,EAAE;MACXZ,QAAQ,CAACF,SAAS,CAACe,gBAAgB,CAAC;QAChCC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOlB,QAAQ,IAAK;IACvBA,QAAQ,CACJF,SAAS,CAACe,gBAAgB,CAAC;MACvBC,MAAM,EAAE,SAAS;MACjBC,KAAK,EAAE,YAAY;MACnBC,OAAO,EAAE;IACb,CAAC,CACL,CAAC;IAED,MAAMG,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,EAAE;QAC3FiB,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBb,KAAK,EAAEQ,IAAI,CAACR,KAAK;UACjBC,aAAa,EAAEO,IAAI,CAACP;QACxB,CAAC;MACL,CAAC,CAAC;MAEF,IAAG,CAACT,QAAQ,CAACE,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC;IAED,IAAI;MACA,MAAMc,WAAW,CAAC,CAAC;MAEnBnB,QAAQ,CAACF,SAAS,CAACe,gBAAgB,CAAC;QAChCC,MAAM,EAAE,SAAS;QACjBC,KAAK,EAAE,UAAU;QACjBC,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAMJ,KAAK,EAAE;MACXZ,QAAQ,CAACF,SAAS,CAACe,gBAAgB,CAAC;QAChCC,MAAM,EAAE,OAAO;QACfC,KAAK,EAAE,QAAQ;QACfC,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}