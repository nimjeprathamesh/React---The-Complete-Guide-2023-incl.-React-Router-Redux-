{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './uiSlice';\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n      }\n    }\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data!'\n    }));\n    const sendRequest = async () => {\n      const response = await fetch('https://react-http-bf792-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n    try {\n      await sendRequest();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n    } catch (error) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sending cart data failed!'\n      }));\n    }\n  };\n};\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendRequest","response","fetch","method","body","JSON","stringify","ok","Error","error","cartActions","actions"],"sources":["D:/Documents/React---The-Complete-Guide-2023-incl.-React-Router-Redux-/20 Advanced Redux/src/store/cartSlice.jsx"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { uiActions } from './uiSlice';\n\nconst cartSlice = createSlice({\n    name: 'cart',\n    initialState: {\n        items: [],\n        totalQuantity: 0,\n    },\n    reducers: {\n        replaceCart(state, action) {\n            state.totalQuantity = action.payload.totalQuantity;\n            state.items = action.payload.items;\n        },\n        addItemToCart(state, action) {\n            const newItem = action.payload;\n            const existingItem = state.items.find((item) => item.id === newItem.id);\n            state.totalQuantity++;\n            if (!existingItem) {\n                state.items.push({\n                id: newItem.id,\n                price: newItem.price,\n                quantity: 1,\n                totalPrice: newItem.price,\n                name: newItem.title,\n                });\n            } else {\n                existingItem.quantity++;\n                existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n            }\n        },\n        removeItemFromCart(state, action) {\n            const id = action.payload;\n            const existingItem = state.items.find((item) => item.id === id);\n            state.totalQuantity--;\n            if (existingItem.quantity === 1) {\n                state.items = state.items.filter((item) => item.id !== id);\n            } else {\n                existingItem.quantity--;\n            }\n        },\n    },\n});\n\nexport const sendCartData = (cart) => {\n    return async (dispatch) => {\n        dispatch(\n            uiActions.showNotification({\n                status: 'pending',\n                title: 'Sending...',\n                message: 'Sending cart data!',\n            })\n        );\n\n        const sendRequest = async () => {\n            const response = await fetch('https://react-http-bf792-default-rtdb.firebaseio.com/cart.json', {\n                method: 'PUT',\n                body: JSON.stringify(cart),\n            });\n\n            if(!response.ok) {\n                throw new Error('Sending cart data failed.');\n            }\n        };\n\n        try {\n            await sendRequest();\n\n            dispatch(uiActions.showNotification({\n                status: 'success',\n                title: 'Success!',\n                message: 'Sent cart data successfully!',\n            }));\n        } catch(error) {\n            dispatch(uiActions.showNotification({\n                status: 'error',\n                title: 'Error!',\n                message: 'Sending cart data failed!',\n            }));\n        }\n    };\n};\n\nexport const cartActions = cartSlice.actions;\nexport default cartSlice;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,WAAW;AAErC,MAAMC,SAAS,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,aAAa,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAE;IACNC,WAAWA,CAACC,KAAK,EAAEC,MAAM,EAAE;MACvBD,KAAK,CAACH,aAAa,GAAGI,MAAM,CAACC,OAAO,CAACL,aAAa;MAClDG,KAAK,CAACJ,KAAK,GAAGK,MAAM,CAACC,OAAO,CAACN,KAAK;IACtC,CAAC;IACDO,aAAaA,CAACH,KAAK,EAAEC,MAAM,EAAE;MACzB,MAAMG,OAAO,GAAGH,MAAM,CAACC,OAAO;MAC9B,MAAMG,YAAY,GAAGL,KAAK,CAACJ,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACvER,KAAK,CAACH,aAAa,EAAE;MACrB,IAAI,CAACQ,YAAY,EAAE;QACfL,KAAK,CAACJ,KAAK,CAACa,IAAI,CAAC;UACjBD,EAAE,EAAEJ,OAAO,CAACI,EAAE;UACdE,KAAK,EAAEN,OAAO,CAACM,KAAK;UACpBC,QAAQ,EAAE,CAAC;UACXC,UAAU,EAAER,OAAO,CAACM,KAAK;UACzBhB,IAAI,EAAEU,OAAO,CAACS;QACd,CAAC,CAAC;MACN,CAAC,MAAM;QACHR,YAAY,CAACM,QAAQ,EAAE;QACvBN,YAAY,CAACO,UAAU,GAAGP,YAAY,CAACO,UAAU,GAAGR,OAAO,CAACM,KAAK;MACrE;IACJ,CAAC;IACDI,kBAAkBA,CAACd,KAAK,EAAEC,MAAM,EAAE;MAC9B,MAAMO,EAAE,GAAGP,MAAM,CAACC,OAAO;MACzB,MAAMG,YAAY,GAAGL,KAAK,CAACJ,KAAK,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC/DR,KAAK,CAACH,aAAa,EAAE;MACrB,IAAIQ,YAAY,CAACM,QAAQ,KAAK,CAAC,EAAE;QAC7BX,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,CAACmB,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKA,EAAE,CAAC;MAC9D,CAAC,MAAM;QACHH,YAAY,CAACM,QAAQ,EAAE;MAC3B;IACJ;EACJ;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMK,YAAY,GAAIC,IAAI,IAAK;EAClC,OAAO,MAAOC,QAAQ,IAAK;IACvBA,QAAQ,CACJ1B,SAAS,CAAC2B,gBAAgB,CAAC;MACvBC,MAAM,EAAE,SAAS;MACjBP,KAAK,EAAE,YAAY;MACnBQ,OAAO,EAAE;IACb,CAAC,CACL,CAAC;IAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gEAAgE,EAAE;QAC3FC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACX,IAAI;MAC7B,CAAC,CAAC;MAEF,IAAG,CAACM,QAAQ,CAACM,EAAE,EAAE;QACb,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAChD;IACJ,CAAC;IAED,IAAI;MACA,MAAMR,WAAW,CAAC,CAAC;MAEnBJ,QAAQ,CAAC1B,SAAS,CAAC2B,gBAAgB,CAAC;QAChCC,MAAM,EAAE,SAAS;QACjBP,KAAK,EAAE,UAAU;QACjBQ,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,OAAMU,KAAK,EAAE;MACXb,QAAQ,CAAC1B,SAAS,CAAC2B,gBAAgB,CAAC;QAChCC,MAAM,EAAE,OAAO;QACfP,KAAK,EAAE,QAAQ;QACfQ,OAAO,EAAE;MACb,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;AACL,CAAC;AAED,OAAO,MAAMW,WAAW,GAAGvC,SAAS,CAACwC,OAAO;AAC5C,eAAexC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}